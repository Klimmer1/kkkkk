#define _CRT_SECURE_NO_DEPRECATE

#include <png.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

/* Цветной пиксель. */

typedef struct{
    uint8_t red;
    uint8_t green;
    uint8_t blue;
    uint8_t alpha;
} pixel_t;

/*  Фотография.. */

typedef struct{
    pixel_t* pixels;
    size_t width;
    size_t height;
} bitmap_t;

/* Учитывая "bitmap", это возвращает пиксель растрового изображения в точке
("x", "y"). */

static pixel_t* pixel_at(bitmap_t* bitmap, int x, int y){
    return bitmap->pixels + bitmap->width * y + x;
}

/* Запишите "bitmap" в файл PNG, указанный с помощью "path"; возвращает 0 при
успешном выполнении, ненулевое значение при ошибке. */

static int save_png_to_file(bitmap_t* bitmap, const char* path){
    FILE* fp;
    png_structp png_ptr = NULL;
    png_infop info_ptr = NULL;
    size_t x, y;
    png_byte** row_pointers = NULL;
    /* "status" содержит возвращаемое значение этой функции. Сначала
ему присваивается значение, которое означает "сбой". Когда процедура
завершает свою работу, ей присваивается значение, означающее
"успех". */
    int status = -1;
    /* Следующий номер устанавливается только методом проб и ошибок. Я не могу
видеть, где это задокументировано в руководстве libpng.
    */
    int pixel_size = 4;
    int depth = 8;

    fp = fopen(path, "wb");
    if (!fp){
        goto fopen_failed;
    }

    png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (png_ptr == NULL){
        goto png_create_write_struct_failed;
    }

    info_ptr = png_create_info_struct(png_ptr);
    if (info_ptr == NULL){
        goto png_create_info_struct_failed;
    }
    /* Настройте обработку ошибок. */

    if (setjmp(png_jmpbuf(png_ptr))){
        goto png_failure;
    }
    /* Установите атрибуты изображения. */

    png_set_IHDR(png_ptr,
        info_ptr,
        bitmap->width,
        bitmap->height,
        depth,
        PNG_COLOR_TYPE_RGBA,
        PNG_INTERLACE_NONE,
        PNG_COMPRESSION_TYPE_DEFAULT,
        PNG_FILTER_TYPE_DEFAULT);
    /* Инициализируйте строки в формате PNG. */

    row_pointers = png_malloc(png_ptr, bitmap->height * sizeof(png_byte*));
    for (y = 0; y < bitmap->height; ++y){
        png_byte* row =
            png_malloc(png_ptr, sizeof(uint8_t) * bitmap->width * pixel_size);
        row_pointers[y] = row;
        for (x = 0; x < bitmap->width; ++x){
            pixel_t* pixel = pixel_at(bitmap, x, y);
            *row++ = pixel->red;
            *row++ = pixel->green;
            *row++ = pixel->blue;
            *row++ = pixel->alpha;
        }
    }
    /* Запишите данные изображения в "fp".*/

    png_init_io(png_ptr, fp);
    png_set_rows(png_ptr, info_ptr, row_pointers);
    png_write_png(png_ptr, info_ptr, PNG_TRANSFORM_IDENTITY, NULL);
    /* Процедура успешно записала файл, поэтому мы устанавливаем
"status" в значение, которое указывает на успех.*/

    status = 0;

    for (y = 0; y < bitmap->height; y++){
        png_free(png_ptr, row_pointers[y]);
    }
    png_free(png_ptr, row_pointers);

png_failure:
png_create_info_struct_failed:
    png_destroy_write_struct(&png_ptr, &info_ptr);
png_create_write_struct_failed:
    fclose(fp);
fopen_failed:
    return status;
}
/* Учитывая "value" и "max", максимальное значение, которое мы ожидаем от "value"
чтобы взять, это возвращает целое число от 0 до 255, пропорциональное
"значению", деленному на "max". */

static int pix(int value, int max){
    if (value < 0)
        return 0;
    return (int)(256.0 * ((double)(value) / (double)max));
}

unsigned long __stack_chk_guard;
void __stack_chk_guard_setup(void){
    __stack_chk_guard = 0xBAAAAAAD;//укажите несколько магических чисел
}

void printPNG(int** matrix, int n, int m, int number){
    bitmap_t fruit;
    int x;
    int y;
    fruit.width = m;
    fruit.height = n;

    fruit.pixels = calloc(sizeof(pixel_t), fruit.width * fruit.height);

    for (y = 0; y < fruit.height; y++){
        for (x = 0; x < fruit.width; x++){
            pixel_t* pixel = pixel_at(&fruit, x, y);

            if (matrix[y][x] == 0){
                pixel->red = 255;
                pixel->green = 255;
                pixel->blue = 255;
                pixel->alpha = 255;
            }
            else if (matrix[y][x] == 1){
                pixel->red = 255;
                pixel->green = 0;
                pixel->blue = 0;
                pixel->alpha = 255;
            }
            else{
                pixel->red = 123;
                pixel->green = 123;
                pixel->blue = 123;
                pixel->alpha = 255;
            }
        }
    }
    char t[100];
    sprintf(t, "fruit0000.png", number);
    save_png_to_file(&fruit, t);

}

void printResult(int** arr, int n, int m){
    for (int i = 0; i < n; i++){
        for (int j = 0; j < m; j++){
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }
}

void printScaled(int data[], int n, int number){
    printf("\n");
    int a1 = 9 + 1;
    int a2 = 8;
    int** matrix = (int**)malloc(sizeof(int*) * a1);
    for (int i = 0; i < a1; i++)
        matrix[i] = (int*)malloc(sizeof(int) * a2);
    for (int i = 0; i < a1; i++){
        for (int j = 0; j < a2; j++){
            matrix[i][j] = 0;
        }
    }

    for (int i = 0; i < a2; i++){
        matrix[a1 - (data[i])][i] = 1;
    }

    printf("\n");
    for (int j = a2 - 1; j >= 0; j--){
        for (int i = a1 - 1; i >= 0; i--){
            if (matrix[i][j] == 0)
                matrix[i][j] = 2;
            else
                break;
        }
    }

    int scale_factor = 50;
    int new_rows = a1 * scale_factor;
    int new_cols = a2 * scale_factor;

    int** result = (int**)malloc(sizeof(int*) * new_rows);
    for (int i = 0; i < new_rows; i++)
        result[i] = (int*)malloc(sizeof(int) * new_cols);

    for (int i = 0; i < a1; i++){
        for (int j = 0; j < a2; j++){
            for (int i1 = i * scale_factor, s1 = 0; s1 < scale_factor; i1++, s1++){
                for (int j1 = j * scale_factor, s2 = 0; s2 < scale_factor; j1++, s2++){
                    result[i1][j1] = matrix[i][j];
                }
            }
        }
    }
    printResult(matrix, a1, a2);
    printPNG(result, new_rows, new_cols, number);
    for (int i = 0; i < new_rows; i++)
        free(result[i]);
    free(result);

    for (int i = 0; i < a1; i++)
        free(matrix[i]);
    free(matrix);
}

void shellSort(int array[], int n)
{
    int i, j, min_idx, counter = 0;
    for (i = 0; i < n - 1; i++) {
        // Находим минимальный элемент в оставшейся части массива
        min_idx = i;
        for (j = i + 1; j < n; j++)
            if (array[j] < array[min_idx])
                min_idx = j;
        // Меняем местами минимальный элемент и текущий элемент
        int temp = array[min_idx];
        array[min_idx] = array[i];
        array[i] = temp;
        // Выводим текущее состояние массива
        printScaled(array, n, ++counter);
    }
}

int main(){
    int data[] = { 9, 8, 3, 7, 5, 6, 4, 1 };
    int size = sizeof(data) / sizeof(data[0]);
    shellSort(data, size);
    return 0;
}

